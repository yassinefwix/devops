node {


    // Docker Registry
    final DOCKER_REGISTRY = 'registry.hub.docker.com'
    final DOCKER_REGISTRY_URL = 'https://'+ DOCKER_REGISTRY
    final DOCKER_REGISTRY_CREDENTIALS = 'dockerHub'

    final WEB_FRONT_NAME = "f2ml-integration-web-front"
    final WEB_BACK_NAME = "f2ml-integration-web-back"

    // networks
    final NETWORK_FRONT = "geekfive/front"
    final NETWORK_BACK = "f2ml-integration-backend"
    final WEB_FRONT_PORT = '82'
    final WEB_BACK_PORT = '81'

    // volumes
    //final IMAGES_VOLUME = '/home/f2ml/web/static'

    stage("WEB front & back containers deploy") {

        // user validation for code update
        if (IS_UPDATE) {
            timeout(time: 5) {
                input 'WARNING : Are you sure to /!\\ UPDATE /!\\ F2ML web front & back containers ? They will be deleted, but the database will remain.';
            }
        }

        // find containers IDs
        def containerWebFrontId = dockerUtils.findContainerIdByName(WEB_FRONT_NAME)
        def containerWebBackId = dockerUtils.findContainerIdByName(WEB_BACK_NAME)

        // remove previous containers if needed
        if (containerWebFrontId != null) {
            dockerUtils.stopAndRemoveContainer(containerWebFrontId)
        }
        if (containerWebBackId != null) {
            dockerUtils.stopAndRemoveContainer(containerWebBackId)
        }
  
        // start new containers (web back & front)
        dockerUtils.pullAndRunImage(DOCKER_REGISTRY, MAINTAINER, WEB_FRONT_NAME, WEB_FRONT_NAME, 'latest', "--network ${NETWORK_FRONT} --network ${NETWORK_BACK} -p ${WEB_FRONT_PORT}:80 ) // -v ./docker/logs/apache2_front/:/var/log/apache2
       
    }
   

    stage("Docker system cleanup") {
        // will remove all stoped container, unused images and tangling volumes & netwoks
        sh "docker system prune -f"
        // display running containers
        sh "docker ps -a"
    }
}
